<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.7.xsd
		http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
    
    <context:component-scan base-package="com.*"></context:component-scan>
    <mvc:annotation-driven /> 
    
    <!--  static resources 설정(ViewResolver 대상에서 제외함) -->
    <mvc:resources location="WEB-INF/resources/css/" mapping="/css/**"></mvc:resources>
    <mvc:resources location="WEB-INF/resources/js/" mapping="/js/**"></mvc:resources>
    <mvc:resources location="WEB-INF/resources/img/" mapping="/img/**"></mvc:resources>
    <!--  html파일 접근 -->
    <mvc:resources location="WEB-INF/static/" mapping="/static/**"></mvc:resources>
    <mvc:resources location="WEB-INF/include/" mapping="/include/**"></mvc:resources>
    
    <bean id="viewResolver" 
      class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />    
    </bean>
	
	<bean id="dataSource"
	class="org.springframework.jdbc.datasource.DriverManagerDataSource"
	>
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
		<property name="url" value="jdbc:mysql://database-1.cbn6q3uvc6bs.ap-northeast-2.rds.amazonaws.com/testgreen?useSSL=false&amp;serverTimezone=UTC"></property>
		<property name="username" value="admin"></property>
		<property name="password" value="rlaltlal"></property>
		 
		
	</bean>
	
	<!--  mybatis와 spring 연결을 위한 SqlSessionFactoryBean 객체 사용
		  DB 연결 및 sql명령 실행 담당 
	  -->
	  <!--
	  SqlSessionFactoryBean sqlSessionFactory= new SqlSessionFactoryBean();
	  sqlSessionFactory.setDataSource("dataSource")
	  sqlSessionFactory.setMapperLocation("classpath:myBatis/sqlmaps/*.xml");
	  와 동일
		  -->
	<bean id="sqlSessionFactory" 
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>	  
		<property name="mapperLocations" value="classpath:myBatis/sqlmaps/*.xml"></property>	  
	</bean>
	
	<!-- SqlSessionTemplate설정 -->
	<!-- 
	SqlSessionTemplate sqlSession
	=new SqlSessionTemplate(sqlSessionFactory);
	와 동일
	 -->
	<bean id="sqlSession" 
		  class="org.mybatis.spring.SqlSessionTemplate"
		  destroy-method="clearCache">
		  <constructor-arg name="sqlSessionFactory"
		  				   ref="sqlSessionFactory">
 		  
 		  </constructor-arg>
	</bean>
	
	<!-- MultipartResolver 설정 -->
    <!-- 최대 업로드 크기설정 100000000 : 100M -->
    <bean id    ="multipartResolver"
          class ="org.springframework.web.multipart.commons.CommonsMultipartResolver">
          <property name="maxUploadSize" value="100000000" />   
          <property name="maxInMemorySize" value="100000000" /> 
    </bean>
       
	<security:authentication-manager alias="authenticationmanager">	
		<security:authentication-provider user-service-ref="userDetailsService"/>
	</security:authentication-manager>
	
		<!--<security:authentication-provider user-service-ref="customOAuth2UserService"/><security:authentication-provider user-service-ref="customOAuth2UserService"/>-->
	<oauth2:client id="oauth2ClientFilter" />	
	<oauth2:resource id="google" 
		type="authorization_code"
		client-id="433814286993-i53h47j5oosfdveb2i33v6b8tiajkn46.apps.googleusercontent.com"
		client-secret="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"
		access-token-uri="https://oauth2.googleapis.com/token"
		user-authorization-uri="https://accounts.google.com/o/oauth2/auth"
		scope="read"
		client-authentication-scheme="form"
		
		/>
	<oauth2:client-details-service id="clientDetails">
	
	</oauth2:client-details-service>
	 <!-- oauth 네임스페이스를 사용해야 oauth2ClientFilter의 oauth2ClientContext를 사용할 수 있다 -->
    <oauth2:rest-template id="restTemplate" resource="google"/>
	
    
</beans>






